searchState.loadedDescShard("triseratops", 0, "This library provides access to metadata and libraries …\nError types and helper functions.\nParsers for the Serato library database and crates\nParsers for Serato’s file tags\nRepresents decode error.\nRepresents decode error.\nRepresents decode error.\nRepresents decode error.\nRepresents decode error.\nError enumerates all possible errors returned by this …\nRepresents all other cases of <code>std::io::Error</code>.\nHappens when trying to write tag data even though no data …\nRepresents an generic parse error.\nRepresents an generic parse error.\nThrown when trying to parse a tag with an unsupported tag …\nRepresents an generic parse error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDAO that reads Serato libraries from the file system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Track object from a list of database fields.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new, empty Track object.\nRead the library in the given path.\nRead the library in the given path.\nReload the library database from the hard disk.\nGet a list of tracks from the subcrate with the given name.\nGet a list of subcrate names.\nGet the track struct for the given path.\nGet all tracks in the library.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>Serato Analysis</code> tag stores the analysis version.\nThe <code>Serato Autotags</code> tag stores BPM and Gain values.\nThe <code>Serato BeatGrid</code> tag stores the beatgrid markers.\nHotcue and Track Colors Helpers\nProvides the <code>TagContainer</code> struct, a simple interface to …\nTraits for the different tag types (ID3, FLAC, etc.)\nGeneric structs\nThe <code>Serato Markers_</code> tag stores information about the first …\nThe <code>Serato Markers2</code> tag stores various kinds of track “…\nThe <code>Serato Overview</code> tag stores the waveform overview data.\nThe <code>Serato RelVolAd</code> tag stores the analysis version.\nThese functions convert between a custom 4-byte format …\nThe <code>Serato VidAssoc</code> tag stores the analysis version.\nRepresents the  <code>Serato Analysis</code> tag.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe analysis version.\nSerialize <code>Analysis</code> struct to bytes.\nSerialize <code>Analysis</code> struct to bytes (Ogg version).\nRepresents the  <code>Serato AutoTags</code> tag.\nThe track’s autogain values (probably comparable to …\nThe track’s number of beats per minute (BPM).\nReturns the argument unchanged.\nThe track’s gain value (manual?).\nCalls <code>U::from(self)</code>.\nThe tag version.\nRepresents the <code>Serato BeatGrid</code> tag.\nRepresents a non-terminal beatgrid marker in the …\nRepresents the terminal beatgrid marker in the …\nThe number of beats between this marker and the next one …\nThe track’s beats per minute (BPM).\nA single footer byte that is apparently random (?).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nZero or more non-terminal beatgrid markers.\nThe position in seconds.\nThe position in seconds.\nThe terminal beatgrid marker.\nThe analysis version.\nRepresents a 3-Byte RGB color value.\nReturns the argument unchanged.\nReturn the stored track color from the displayed track …\nCalls <code>U::from(self)</code>.\nReturn the displayed track color from the stored track …\nReturn the corresponding Serato DJ Intro Hotcue (i.e. …\nReturn the corresponding Serato DJ Pro Hotcue color for …\nProvides a streamlined interface for retrieving Serato tag …\nThe tag type of the data.\nReturns the <code>auto_gain</code> value from the <code>Serato Autotags</code> tag.\nReturns the beatgrid from the <code>Serato BeatGrid</code> tag.\nReturns BPM lock status from the <code>Serato Markers2</code> tag.\nReturns cues from the <code>Serato Markers_</code> and <code>Serato Markers2</code> …\nReturns flips from the <code>Serato Markers2</code> tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>gain_db</code> value from the <code>Serato Autotags</code> tag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns loops from the <code>Serato Markers_</code> and <code>Serato Markers2</code> …\nCreate an empty Serato tag container.\nReturns the waveform overview data color from the …\nParse the <code>Serato Autotags</code> tag.\nParse the <code>Serato BeatGrid</code> tag.\nParse the <code>Serato Markers_</code> tag.\nParse the <code>Serato Markers2</code> tag.\nParse the <code>Serato Overview</code> tag.\nReturns the track color from the <code>Serato Markers_</code> and …\nWrite the <code>Serato Autotags</code> tag.\nWrite the <code>Serato BeatGrid</code> tag.\nWrite the <code>Serato Markers_</code> tag.\nWrite the <code>Serato Markers2</code> tag.\nWrite the <code>Serato Overview</code> tag.\nHelper for FLAC and MP4 tags\nFLAC tags\nID3 tags\nMP4 tags\nOgg tags\nName of the <code>VORBIS_COMMENT</code> that this data is stored in.\nName of the ID3 tag that this data is stored in.\nThe mean part of the freeform <code>MP4_ATOM</code> that this data is …\nThe mean part of the freeform <code>MP4_ATOM</code> that this data is …\nName of the <code>MP4_ATOM</code> that this data is stored in.\nA “Censor” action inside of a <code>Flip</code> performance.\nA cue point.\nA Serato Flip performances.\nAn action inside of a <code>Flip</code> performance.\nA “Jump” action inside of a <code>Flip</code> performance.\nA saved loops.\nTime-based position\nA unknown action inside of a <code>Flip</code> performance that we don…\nRepresents 2-Byte version value.\nThe end position of the censoring.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe source position of the jump.\nThe playback speed factor (usually -1.0).\nThe start position of the censoring.\nThe target position of the jump.\nUsed for set cues.\nUsed for unset cues.\nUsed for loops (both set and unset ones).\nRepresents a single marker in the <code>Serato Markers_</code> tag.\nType of a Marker.\nRepresents the <code>Serato Markers_</code> tag.\nThe color of the cue.\nIf this is a loop, this field stores the end position.\nThe marker entries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the loop is locked.\nThe type of this marker.\nThe position of the loop or cue.\nReturns a bool parsed from the next input byte.\nReturns an <code>Option&lt;Position&gt;</code> which contains the position …\nThe color of the track in Serato’s library view.\nThe tag version.\nA <code>BPMLOCK</code> marker.\nA marker in the <code>Serato Markers2</code> tag.\nRepresents the <code>Serato Markers2</code> tag.\nRepresents the base64-encoded content of the …\nA <code>COLOR</code> marker.\nAn unknown marker that we don’t have a parser for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a nullbyte or newline character from the input …\nReturns a nullbyte from the input slice (non-consuming).\nRepresents the <code>Serato Overview</code> tag.\nThe Waveform overview data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe tag version.\nRepresents the  <code>Serato RelVolAd</code> tag.\nThe data (not reverse-engineered yet)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>RelVolAd</code> version.\nDecodes value from Serato’s 32-bit custom format to …\nEncodes 3-byte value to to Serato’s 32-bit custom format.\nReturns a 3-byte tuple decoded from the first 4 input …\nReturns a <code>Color</code> decoded from the first 4 input bytes.\nReturns a <code>u32</code> decoded from the first 4 input bytes.\nRepresents the  <code>Serato VidAssoc</code> tag.\nThe data (not reverse-engineered yet)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>VidAssoc</code> version.")